<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Presentation</name>
    </assembly>
    <members>
        <member name="T:Presentation.Controllers.ApiController">
            <summary>
            Represents the base API controller.
            </summary>
        </member>
        <member name="P:Presentation.Controllers.ApiController.Sender">
            <summary>
            Gets the sender.
            </summary>
        </member>
        <member name="T:Presentation.Controllers.AuthController">
            <summary>
            Represents the auth controller.
            </summary>
        </member>
        <member name="M:Presentation.Controllers.AuthController.RegisterClient(Application.Client.Commands.CreateClient.CreateClientRequest,System.Threading.CancellationToken)">
            <summary>
            Offers ability to register api clients
            </summary>     
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Presentation.Controllers.AuthController.CreateToken(Application.Client.Queries.AuthenticateClient.TokenRequest,System.Threading.CancellationToken)">
            <summary>
            Before invoking this endpoint ensure your key and secret are whitelisted. 
            Generates a JWT Bearer access token that can be used to authorize subsequent requests.      
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Presentation.Controllers.EmailController">
            <summary>
            Represents the Email controller.
            </summary>
        </member>
        <member name="M:Presentation.Controllers.EmailController.GetEmail(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the emailId with the specified identifier, if it exists.
            </summary>
            <param name="emailId">The email identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The email with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.EmailController.CreateEmail(Application.Email.Commands.CreateEmail.CreateEmailRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new email based on the specified request.
            </summary>
            <param name="request">The create email request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The identifier of the newly created email.</returns>
        </member>
        <member name="T:Presentation.Controllers.ProductController">
            <summary>
            Represents the product controller.
            </summary>
        </member>
        <member name="M:Presentation.Controllers.ProductController.GetProduct(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the product  with the specified identifier, if it exists.
            </summary>
            <param name="productId">The product identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The product with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.ProductController.CreateProduct(Application.Product.Commands.CreateProduct.CreateProductRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new product based on the specified request.
            </summary>
            <param name="request">The create product request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The identifier of the newly created product.</returns>
        </member>
        <member name="T:Presentation.Controllers.ShoppingCartController">
            <summary>
            Represents the ShoppingCart controller.
            </summary>
        </member>
        <member name="M:Presentation.Controllers.ShoppingCartController.GetShoppingCart(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the shoppingCart  with the specified identifier, if it exists.
            </summary>
            <param name="shoppingCartId">The shoppingCart identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The shoppingCart with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.ShoppingCartController.GetShoppingCartByUserId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the shoppingCart  with the specified user identifier, if it exists.
            </summary>
            <param name="userId">The shoppingCart identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The shoppingCart with the specified user identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.ShoppingCartController.CreateShoppingCart(Application.ShoppingCart.Commands.CreateShoppingCart.CreateShoppingCartRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new ShoppingCart based on the specified request.
            </summary>
            <param name="request">The create ShoppingCart request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The identifier of the newly created ShoppingCart.</returns>
        </member>
    </members>
</doc>
